"use strict";
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
Object.defineProperty(exports, "__esModule", { value: true });
const client_1 = require("@prisma/client");
const kafkajs_1 = require("kafkajs");
const TOPIC_NAME = "zap-events"; //queue create of this name
const client = new client_1.PrismaClient();
const kafka = new kafkajs_1.Kafka({
    clientId: "outbox-processor",
    brokers: ["localhost:9092"],
});
function main() {
    return __awaiter(this, void 0, void 0, function* () {
        const producer = kafka.producer();
        yield producer.connect();
        while (1) {
            const pendingRows = yield client.zapRunOutbox.findMany({
                where: {},
                take: 10,
            });
            //send messages in bulk
            console.log(pendingRows);
            producer.send({
                topic: TOPIC_NAME,
                messages: pendingRows.map((r, idx) => ({
                    value: JSON.stringify({ zapRunId: r.zapRunId, stage: 0 }),
                })),
            });
            yield client.zapRunOutbox.deleteMany({
                where: {
                    id: {
                        in: pendingRows.map((x) => x.id),
                    },
                },
            });
            yield new Promise((res) => setTimeout(res, 3000));
        }
    });
}
main();
//since we are not using monorepo , we have to rewite the same code
/**
 * The in keyword is used to specify that the id of the rows to be deleted must match any of the values in the array generated by pendingRows.map(x => x.id).
 * Essentially, it tells Prisma to delete all records where the id field matches any of the IDs in the provided list.
 *
 * ?pendingRows.map(x => x.id)
 * This code generates an array of IDs from the pendingRows array. Each element in pendingRows is an object, and x.id extracts the id property from each object.
 * For example, if pendingRows is [{ id: 1 }, { id: 2 }, { id: 3 }], then pendingRows.map(x => x.id) will result in [1, 2, 3].
 * ?id: { in: ... }:
 * This part of the query specifies that the id of the rows to be deleted should be one of the values in the array [1, 2, 3].
 *
 * * The in keyword is used to match multiple values, making it possible to delete (or filter) rows based on whether their id is in a specified list. This is a common operation when you need to perform batch deletions or updates based on a list of identifiers.
 */
